# For more information see:
# https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: OPERANDI CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  REPO_NAME: ${{ github.repository }}

jobs:
  build-native:
    name: Native build of Operandi modules
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install operandi dependencies
        run: |
          sudo apt-get update && apt-get -y install make
          python3 -m pip install --upgrade pip setuptools  
          pip3 install -U pip wheel
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements_test.txt ]; then pip install -r requirements.txt; fi

      - name: Lint with flake8
        run: |
          python3 -m pip install flake8      
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=12 --max-line-length=127 --statistics

      - name: Install operandi modules
        run: make install

  build-and-push-development:
    name: Push ${{matrix.environment.service}} to image registry
    environment:
      name: development
    needs: build-native
    strategy:
      fail-fast: true
      matrix:
        services: [
          { module: "broker", dockerfile: "Dockerfile_broker" },
          { module: "server", dockerfile: "Dockerfile_server" }
        ]
        os: [ ubuntu-latest ]
    runs-on: ${{ matrix.os }}

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        id: meta
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          images: ${{ env.REGISTRY }}/${{ env.REPO_NAME }}-${{matrix.services.module}}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: ./src
          file: ./src/${{matrix.services.dockerfile}}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }} 

  deploy-development:
    name: Deploy to development VM
    environment:
      name: development
    needs: build-and-push-development
    runs-on: ubuntu-latest

    steps:
      - name: copy ssh key
        env:
          SSH_KEY: ${{ secrets.OPERANDI_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/key
          chmod 600 ~/.ssh/key

      - name: deploy
        env:
          SSH_USER: ${{ secrets.OPERANDI_SSH_USER }}
          SSH_HOST: ${{ secrets.OPERANDI_SSH_HOST_PROD }}
        run: ssh $SSH_USER@$SSH_HOST -o StrictHostKeyChecking=no -i ~/.ssh/key /home/$SSH_USER/operandi/start-operandi-docker.sh
